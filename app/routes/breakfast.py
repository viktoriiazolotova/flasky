from flask import abort, Blueprint, jsonify, make_response, request
from app import db
from app.models.breakfast import Breakfast
from app.models.menu import Menu

breakfast_bp = Blueprint("breakfast", __name__, url_prefix = "/breakfast")



@breakfast_bp.route("", methods = ["GET"])
def get_all_breakfasts():
    rating_query_value = request.args.get("rating") # it returns value of key or None

    breakfasts = Breakfast.query.filter_by(rating=rating_query_value)

    if rating_query_value is not None:
        breakfasts = Breakfast.query.filter_by(rating=rating_query_value)
    else:
        breakfasts = Breakfast.query.all()

    result = []
    for item in breakfasts:
        result.append(item.to_dict())
    return jsonify(result), 200

@breakfast_bp.route("", methods = ["POST"])
def create_one_breakfast():
    request_body = request.get_json()
    # we dont need pass id since it is autogenerated
    # new_breakfast = Breakfast(
    #                  name= request_body["name"],
    #                  rating=request_body["rating"],
    #                  prep_time=request_body["prep_time"])
    new_breakfast = Breakfast.from_dict(request_body)
    db.session.add(new_breakfast)
    db.session.commit()
    return jsonify({"message": f"Successfuly created Breakfast with id {new_breakfast.id}"}), 201

@breakfast_bp.route("/<breakfast_id>", methods = ["GET"])
def get_breakfast(breakfast_id):
    choosen_breakfast = get_model_from_id(Breakfast, breakfast_id)
    return jsonify(choosen_breakfast.to_dict()), 200
    # return return_breakfast, 200 #this will also work, but we use 
    #jsonify to be consistent

@breakfast_bp.route("/<breakfast_id>", methods = ["PUT"]) # required to update all fields
def update_one_breakfast(breakfast_id):
    update_breakfast = get_model_from_id(Breakfast, breakfast_id)
    request_body = request.get_json()

    try:
        update_breakfast.name = request_body["name"]
        update_breakfast.rating = request_body["rating"]
        update_breakfast.prep_time = request_body["prep_time"]
    except KeyError:
        return jsonify({"msg": "Missing needed data"}), 400
    db.session.commit()
    return jsonify({"msg": f"Successfully updated breakfast with id {breakfast_id}"}), 200

@breakfast_bp.route("/<breakfast_id>", methods = ["DELETE"])
def delete_one_breakfast(breakfast_id):
    breakfast_to_delete = get_model_from_id(Breakfast, breakfast_id)
    db.session.delete(breakfast_to_delete)
    db.session.commit()
    return jsonify({"msg": f"Successfully deleted breakfast with id {breakfast_id}"}), 200


@breakfast_bp.route("/<breakfast_id>", methods = ["PATCH"])
def add_menu_to_breakfast(breakfast_id):
    breakfast = get_model_from_id(Breakfast, breakfast_id)
    request_body = request.get_json()
    try:
        menu_id = request_body['menu_id']
    except KeyError:
        return jsonify({"msg": "Missing menu id"}), 400
    
    menu = get_model_from_id(Menu, menu_id)
    breakfast.menu = menu

    db.session.commit()

    return jsonify({"msg": f"Added breakfast {breakfast.name} to menu id #{menu_id}"}), 200




def get_model_from_id(cls, model_id):
    try:
        model_id = int(model_id)
    except ValueError:
        return abort(make_response({"message": f"invalid id for model of type { cls.__name__}: {model_id}"}, 400))
        
    choosen_object = cls.query.get(model_id)
    
    if choosen_object is None:
        return abort(make_response({"message": f"Could not find {cls.__name__} item with id: {model_id}"}, 404))
    
    return choosen_object